import math
import random
import matplotlib.pyplot as plt


class Point:
    angle = 0

    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __repr__(self):
        return "(" + str(self.x) + ", " + str(self.y) + ")"

    def __str__(self):
        return "(" + str(self.x) + ", " + str(self.y) + ")"


def generateRandomPoints(n):
    myPoints = []

    for i in range(n):
        myPoints.append(Point(random.randint(1, 100), random.randint(1, 100)))

    return myPoints


def getCrossProduct(p, q, r):
    crossProduct = (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y)
    return crossProduct


def findBottomLeftMostPoint(points):
    minIndex = 0

    for i in range(1, len(points)):
        currentMin = points[minIndex]
        currentPoint = points[i]

        # Update to lowest point
        if currentPoint.y < currentMin.y:
            minIndex = i

        # If multiple points have same y coord, prioritise left most point
        elif currentPoint.y == currentMin.y:
            if currentPoint.x < currentMin.x:
                minIndex = i

    return minIndex


def scatterPlotPoints(points):
    xPoints = [point.x for point in points]
    yPoints = [point.y for point in points]

    for point in points:
        plt.scatter(point.x, point.y)


def distance(p, q):
    return math.pow(p.x - q.x, 2) + math.pow(p.y - q.y, 2)


def calculateAngles(originIndex, points):
    originPoint = points[originIndex]

    for i in range(len(points)):
        if originIndex == i:
            continue

        points[i].angle = getCrossProduct(Point(originPoint.x, originPoint.y - 1), originPoint, points[i])

    return points


points = generateRandomPoints(4)
bottomLeftmostPoint = findBottomLeftMostPoint(points)

calculateAngles(bottomLeftmostPoint, points)
scatterPlotPoints(points)
for i in points:
    print(str(i) + ": "+str(i.angle))

plt.show()
